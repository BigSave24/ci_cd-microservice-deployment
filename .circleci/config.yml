version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2

executors:
  python:
    docker:
      - image: circleci/python:3.8.9-buster
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  # setup-environment:
  #   docker:
  #     # Use the same Docker base as the project
  #     - image: python:3.8.9-buster

  #   working_directory: ~/repo

  #   steps:
  #     - checkout
  #     # Download and cache dependencies
  #     - restore_cache:
  #         keys:
  #           - v1-dependencies-{{ checksum "requirements.txt" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v1-dependencies-

  #     - run:
  #         name: setup virtual environment
  #         command: |
  #           make setup
  #           source ~/.breakingbad/bin/activate
  #           make install

  #     - run:
  #         name: install dependencies
  #         command: |
  #           make install

  #     - save_cache:
  #         paths:
  #           - ~/.breakingbad
  #         key: v1-dependencies-{{ checksum "requirements.txt" }}

  # build-docker-files:
  #   docker:
  #     # Use the same Docker base as the project
  #     - image: circleci/buildpack-deps:trusty

  #   steps:
  #     - checkout
  #     # Download and cache dependencies
  #     - restore_cache:
  #         keys:
  #           - v2-dependencies-{{ checksum "requirements.txt" }}
  #           # fallback to using the latest cache if no exact match is found
  #           - v2-dependencies-

  #     - run:
  #         name: build out dockerfile
  #         command: |
  #           docker login -u ${DOCKER_USERNAME} --password-stdin
  #           aws ecr get-login-password --region us-east-1 | docker login /
  #             --username AWS /
  #             --password-stdin 592339293101.dkr.ecr.us-east-1.amazonaws.com
  #           docker build -t breakingbad .
  #           docker tag breakingbad:latest 592339293101.dkr.ecr.us-east-1.amazonaws.com/breakingbad:latest

  #     - save_cache:
  #         paths:
  #           - ~/.breakingbad
  #         key: v2-dependencies-{{ checksum "requirements.txt" }}
  lint-testing:
    # docker:
    #   # Use the same Docker base as the project
    #   - image: circleci/python:3.8.9-buster
    executor: python

    steps:
      - checkout
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v3-dependencies-{{ checksum "requirements.txt" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v3-dependencies-
      - run:
          name: install dependencies
          command: |
            make setup
            source ~/.breakingbad/bin/activate
            make install
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
            sudo pip install pylint

      # Run Lint Test
      - run:
          name: run lint
          command: |
            make lint

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v3-dependencies-{{ checksum "requirements.txt" }}

  push-container-image:
    # docker:
    #   # Use the same Docker base as the project
    #   - image: circleci/buildpack-deps:trusty
    machine: true
    working_directory: ~/app

    steps:
      - checkout
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v2-dependencies-{{ checksum "requirements.txt" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v2-dependencies-
      # - run:
      #     name: install aws cli
      #     command: |
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" /
      #         -o "awscliv2.zip"
      #       sudo unzip awscliv2.zip
      #       sudo ./aws/install
      - run:
          name: push image to respository
          command: |
            # docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            # aws ecr get-login-password --region us-east-1 | docker login /
            #   --username AWS /
            #   --password-stdin 592339293101.dkr.ecr.us-east-1.amazonaws.com
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t breakingbad:v1 .
            docker tag breakingbad:v1 kedmond24/breakingbad:latest
            docker push kedmond24/breakingbad:latest

      # - save_cache:
      #     paths:
      #       - ~/.breakingbad
      #     key: v2-dependencies-{{ checksum "requirements.txt" }}

  kubernetes-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacity-capstone
        type: string
    steps:
      - checkout
      # # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v2-dependencies-{{ checksum "requirements.txt" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v2-dependencies-
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/udacity-capstone
      # - kubernetes/create-or-update-resource:
      #     get-rollout-status: true
      #     resource-file-path: deployment.yml
      #     resource-name: 592339293101.dkr.ecr.us-east-1.amazonaws.com/breakingbad
      #     show-kubectl-command: true

      # - run:
      #     name: setup kubernetes deployment
      #     command: |
      #       kubectl apply -f deployment.yaml
      #       kubectl get deployments

      # - run:
      #     name: set kubernetes service
      #     command: |
      #       kubectl apply -f service.yaml
      #       kubectl get services

      # - save_cache:
      #     paths:
      #       - ~/.breakingbad
      #     key: v2-dependencies-{{ checksum "requirements.txt" }}

  verify-kubernetes-deployments:
    # docker:
    #   # Use the same Docker base as the project
    #   - image: python:3.8.9-buster

    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacity-capstone
        type: string

    steps:
      # - checkout
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v2-dependencies-{{ checksum "requirements.txt" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v2-dependencies-
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: install dependencies
          command: |
            kubectl get services && /
            kubectl get pods && /
            kubectl get nodes

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v2-dependencies-{{ checksum "requirements.txt" }}

workflows:
  udacity-capstone:
    jobs:
      # - setup-environment
      # - build-docker-files:
      #     requires: [setup-environment]
      - lint-testing
      - push-container-image:
          requires: [lint-testing]
      - kubernetes-deployment:
          cluster-name: udacity-capstone
          requires: [push-container-image]
      - verify-kubernetes-deployments:
          cluster-name: udacity-capstone
          requires: [kubernetes-deployment]
