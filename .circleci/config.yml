version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2

jobs:
  setup-environment:
    docker:
      # Use the same Docker base as the project
      - image: python:3.8.9-buster

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: setup virtual environment
          command: |
            make setup
            source ~/.breakingbad/bin/activate
            make install

      - run:
          name: install dependencies
          command: |
            make install

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  build-docker-files:
    docker:
      # Use the same Docker base as the project
      - image: buildpack-deps:trusty

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: build out dockerfile
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            aws ecr get-login-password --region us-east-1 | docker login /
              --username AWS /
              --password-stdin 592339293101.dkr.ecr.us-east-1.amazonaws.com
            docker build -t breakingbad .
            docker tag breakingbad:latest 592339293101.dkr.ecr.us-east-1.amazonaws.com/breakingbad:latest

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  lint-testing:
    docker:
      # Use the same Docker base as the project
      - image: python:3.8.9-buster

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # Run Lint Test
      - run:
          name: run lint
          command: |
            make lint

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  push-container-image:
    docker:
      # Use the same Docker base as the project
      - image: buildpack-deps:trusty

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: push image to respository
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker push 592339293101.dkr.ecr.us-east-1.amazonaws.com/breakingbad:latest

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  kubernetes-deployment:
    docker:
      - image: 'cimg/base:stable'

      working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - kubernetes/install-kubectl
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: 592339293101.dkr.ecr.us-east-1.amazonaws.com/breakingbad
          show-kubectl-command: true

      - run:
          name: setup kubernetes deployment
          command: |
            kubectl apply -f deployment.yaml
            kubectl get deployments

      - run:
          name: set kubernetes service
          command: |
            kubectl apply -f service.yaml
            kubectl get services

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  verify-kubernetes-deployments:
    # docker:
    #   # Use the same Docker base as the project
    #   - image: python:3.8.9-buster
    
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          udacity-capstone
        type: string

    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            kubectl get services && /
            kubectl get pods && /
            kubectl get nodes

      - save_cache:
          paths:
            - ~/.breakingbad
          key: v1-dependencies-{{ checksum "requirements.txt" }}

workflows:
  udacity-capstone:
    jobs:
      - setup-environment
      - build-docker-files:
          requires: [setup-environment]
      - lint-testing:
          requires: [build-docker-files]
      - push-container-image:
          requires: [lint-testing]
      - kubernetes-deployment:
          requires: [push-container-image]
      - verify-kubernetes-deployments:
          requires: [kubernetes-deployment]
